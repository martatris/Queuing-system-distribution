import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import numpy as np
import scipy
import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv("full_data.csv")

# histogram plot
sns.displot(data, x = data.iloc[:,3], kde=True)
plt.title("Service Times in the System")
plt.xlabel("Frequency")
plt.ylabel("Time in Seconds")
plt.show()

dist_names = ['erlang', 'gamma', 'expon', 'norm']
chi_square_statistics = []

# 60 equi-distant bins of observed Data
percentile_bins = np.linspace(0,100,60)
percentile_cutoffs = np.percentile(data.iloc[:,3], percentile_bins)
observed_frequency, bins = (np.histogram(data.iloc[:,3], bins=percentile_cutoffs))
cum_observed_frequency = np.cumsum(observed_frequency)

# Loop through candidate distributions
for distribution in dist_names:
    # Set up distribution and get fitted distribution parameters
    dist = getattr(scipy.stats, distribution)
    param = dist.fit(data.iloc[:,3])
    print("{}\n{}\n".format(dist, param))

    # Get expected counts in percentile bins
    # cdf of fitted distribution across bins
    cdf_fitted = dist.cdf(percentile_cutoffs, *param)
    expected_frequency = []
    for bin in range(len(percentile_bins)-1):
        expected_cdf_area = cdf_fitted[bin+1] - cdf_fitted[bin]
        expected_frequency.append(expected_cdf_area)
    # Chi-square Statistics
    expected_frequency = np.array(expected_frequency) * len(data.iloc[:,3])
    cum_expected_frequency = np.cumsum(expected_frequency)
    ss = sum(((cum_expected_frequency - cum_observed_frequency)**2)/cum_observed_frequency)
    chi_square_statistics.append(ss)

#Sort by minimum chi-square statistics
results = pd.DataFrame()
results['Distribution'] = dist_names
results['chi_square'] = chi_square_statistics
results.sort_values(['chi_square'], inplace=True)
print('\nDistributions listed by Betterment of fit')
print('............................................')
print(results)
print('............................................')
print('The shape found is not integer and the erlang documentation also mention it doesnt enforce that, just throws an error.')
print('Erlang distribution is the lowest, but erlang is a gamma distribution with an integer shape parameter.')
print('............................................')
print('The ChiSq value for Gamma distribution is: ', results.at[1, 'chi_square'])
print('The p-value for Gamma distribution: ',1 - stats.chi2.cdf(24.61447437765395, 1))
